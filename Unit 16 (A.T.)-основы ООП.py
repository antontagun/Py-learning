# ООП - объектно-ориентированное программирование
# ООП - это такой способ написания кода, в котором все данные (блоки, их цвет, расположение
# друг относительно друга и тп.) рассматриваются как объект, в отличии от процедурного программирования,
# в котором мы думали о действиях

# Зачем нам это нужно? Когда в игре появится много танков и самолетов, нужно понимать какой именно танк
# должен повернуть дуло, какой самолет должен сбросить бомбу и т.п.

# КЛАСС - основное понятие ООП - это шаблон (образец) для создания объектов.
# Можно сказать, что класс - это ДНК будущих объектов (танков, самолетов и т.п.)

# Объекты, созданные от класса, наз-ся ЭКЗЕМПЛЯРАМИ данного класса

# У любого объекта есть две сущности: 1) Состояние (количественные (размер танка,
# длина дула и тп.) и качественные (цвет, материал и т.п.) характеристики
# объекта) и 2) Поведение (что может делать танк или что мы можем сделать с ним)
class Car: # имя класса пишется с большой букв (а имя функции(метода) пишется с маленькой буквы)
    'Создали класс Car' # строка-описание класса (краткая информация о классе)
    # __init__ - специальная функция(метод), которая наз-ся конструктор. В ней создаются АТРИБУТЫ, которые отвечают за
    # состояние объекта
    # в скобках конструктора пишутся параметры, через которые, как правило, определяются значения атрибутов
    def __init__(self, color, model, power, speed):
        # АТРИБУТ = это неотъемлемая часть будущего объекта, которая может принимать различные значения
        # Совокупность АТРИБУТОВ определяет СОСТОЯНИЕ будущего объекта (качественные и количественные характеристики)
        # Атрибуты пишутся после слова self
        #self.color='red' # если написать так, то все объекты при создании будут красными, цвет можно будет поменять
        # после создания объекта
        # self - это обезличенное имя любого объекта данного класса
        # Пример для понимания слова обезличенный. В классе есть Вася, Петя, Миша, Коля и Антон.
        # Вася.цвет_глаз => этот человек.цвет_глаза; Антон.цвет_волос => этот человек.цвет_волос
        # КОЛИЧЕСТВЕННЫЕ АТРИБУТЫ
        self.year = 2017
        self.power = power
        self.speed = speed
        # КАЧЕСТВЕННЫЕ АТРИБУТЫ
        self.color = color # определяем значение атрибута self.color через параметр color сразу при создании объекта
        self.__model = model

    # Если функция описана в классе, то её (как-правило) называют методом
    # Совокупность МЕТОДОВ определяет ПОВЕДЕНИЕ будущего объекта

    # обычные методы (принадлежат объектам)
    # метод для движения
    def drive(self): # self - это обязательный параметр любого обычного метода (ordinary method)
        print('Еду!') # реализация метода - это то, что метод делает

    # метод для торможения
    def break_car(self):
        print('Торможу')


# имя объекта = имя Класса(параметры конструктора)
car1=Car('yellow','bmw',199,240) # создали машину (объект, экземпляр класса Car) с именем car1
print(car1) # <__main__.Car object at 0x000001FF9A569FD0>
# смотрим значения атрибутов для данной машины (объекта) car1
print(car1.year) # 2017
print(car1.speed) # 240
print(car1.color) # yellow
# перекрасим машину в красный цвет
car1.color = 'red'
print(car1.color) # red

# Создадим ещё одну машину
car2=Car('green', 'ford', 149, 200) # создали машину (объект, экземпляр класса Car) с именем car2
print(car2) # <__main__.Car object at 0x00000247CC488F70>
# смотрим значения атрибутов для данной машины (объекта) car2
print(car2.speed) # 200
print(car2.color) # green
# изменим год выпуска машину
car2.year = 2019
print(car2.year) # 2019

# Вывод: у всех объектов класса будут одни и те же атрибуты, но значения этих атрибутов для каждого
# объекта могут быть разные

car1.drive() # Еду!
car2.break_car() # Торможу

# Вывод: все объекты данного класса могут пользоваться методами данного класса


































    


